{
  "name": "datapack-language-server",
  "version": "4.0.0",
  "main": "dist/extension.js",
  "author": "SPGoding",
  "publisher": "SPGoding",
  "license": "MIT",
  "scripts": {
    "build": "tsc -b && webpack",
    "build:dev": "webpack --mode=\"development\"",
    "build:profile": "webpack --profile --json > dist/stats.json",
    "watch": "webpack --watch --mode=\"development\""
  },
  "dependencies": {
    "vscode-languageclient": "^7.0.0"
  },
  "devDependencies": {
    "@types/vscode": "^1.44.0",
    "@types/webpack": "^4.41.22",
    "typescript": "^4.2.1-rc",
    "vscode-test": "^1.3.0",
    "webpack": "^5.10.0",
    "webpack-cli": "^4.2.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/SPYGlassMC/SPYGlass.git"
  },
  "homepage": "https://spyglassmc.com",
  "bugs": {
    "url": "https://github.com/SPYGlassMC/SPYGlass/issues"
  },
  "engines": {
    "vscode": "^1.44.0"
  },
  "displayName": "%datapack.displayName%",
  "description": "%datapack.description%",
  "icon": "icon.png",
  "categories": [
    "Formatters",
    "Linters",
    "Programming Languages"
  ],
  "keywords": [
    "multi-root ready",
    "minecraft",
    "datapack",
    "mcfunction"
  ],
  "contributes": {
    "jsonValidation": [
      {
        "fileMatch": [
          "pack.mcmeta",
          "data/*/advancements/*.json",
          "data/*/item_modifiers/*.json",
          "data/*/loot_tables/*.json",
          "data/*/predicates/*.json",
          "data/*/recipes/*.json",
          "data/*/tags/*.json",
          "data/minecraft/*.json"
        ],
        "url": "./resource/empty-object.json"
      }
    ],
    "keybindings": [
      {
        "command": "datapack.createFile",
        "key": "Alt+Shift+D Alt+Shift+C"
      },
      {
        "command": "datapack.evaludateJavaScript",
        "key": "Alt+Shift+D Alt+Shift+E"
      },
      {
        "command": "datapack.redownloadData",
        "key": "Alt+Shift+D Alt+Shift+D"
      },
      {
        "command": "datapack.regenerateCache",
        "key": "Alt+Shift+D Alt+Shift+G"
      }
    ],
    "languages": [
      {
        "id": "mcfunction",
        "extensions": [
          ".mcfunction"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "nbtdoc",
        "extensions": [
          ".nbtdoc"
        ]
      },
      {
        "id": "json",
        "extensions": [
          ".mcmeta"
        ]
      }
    ],
    "commands": [
      {
        "command": "datapack.createFile",
        "title": "%datapack.commands.createFile.title%",
        "category": "Datapack",
        "enablement": "workspaceFolderCount != 0"
      },
      {
        "command": "datapack.evaludateJavaScript",
        "title": "%datapack.commands.evaludateJavaScript.title%",
        "category": "Datapack",
        "enablement": "editorLangId == mcfunction && editorHasSelection"
      },
      {
        "command": "datapack.redownloadData",
        "title": "%datapack.commands.redownloadData.title%",
        "category": "Datapack"
      },
      {
        "command": "datapack.regenerateCache",
        "title": "%datapack.commands.regenerateCache.title%",
        "category": "Datapack",
        "enablement": "workspaceFolderCount != 0"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "datapack.createFile",
          "when": "workspaceFolderCount != 0"
        },
        {
          "command": "datapack.evaludateJavaScript",
          "when": "editorLangId == mcfunction"
        },
        {
          "command": "datapack.regenerateCache",
          "when": "workspaceFolderCount != 0"
        }
      ]
    },
    "configuration": {
      "title": "SPYGlass"
    },
    "configurationDefaults": {
      "[json]": {
        "editor.semanticHighlighting.enabled": true
      },
      "[nbtdoc]": {
        "editor.semanticHighlighting.enabled": true
      },
      "[mcfunction]": {
        "editor.semanticHighlighting.enabled": true
      }
    },
    "semanticTokenTypes": [
      {
        "id": "annotation",
        "description": "An annotation in doc comments"
      },
      {
        "id": "boolean",
        "description": "A real boolean value"
      },
      {
        "id": "entity",
        "description": "An entity or a score holder"
      },
      {
        "id": "literal",
        "description": "A literal argument"
      },
      {
        "id": "identity",
        "description": "A namespaced ID"
      },
      {
        "id": "vector",
        "description": "A vector"
      }
    ],
    "semanticTokenModifiers": [
      {
        "id": "firstArgument",
        "description": "The first argument in a command"
      },
      {
        "id": "inString",
        "description": "The token is in a string"
      }
    ],
    "semanticTokenScopes": [
      {
        "scopes": {
          "annotation:json": [
            "support.type.doc.annotation.json"
          ],
          "annotation:mcfunction": [
            "support.type.doc.annotation.mcfunction"
          ],
          "boolean:json": [
            "constant.language.boolean.json"
          ],
          "boolean:mcfunction": [
            "constant.language.boolean.mcfunction"
          ],
          "entity:json": [
            "support.class.entity.json"
          ],
          "entity:mcfunction": [
            "support.class.entity.mcfunction"
          ],
          "literal:json": [
            "keyword.other.json"
          ],
          "literal:mcfunction": [
            "keyword.other.mcfunction"
          ],
          "literal.firstArgument:json": [
            "keyword.control.json"
          ],
          "literal.firstArgument:mcfunction": [
            "keyword.control.mcfunction"
          ],
          "identity:json": [
            "entity.name.function.json"
          ],
          "identity:mcfunction": [
            "entity.name.function.mcfunction"
          ],
          "vector:json": [
            "constant.numeric.vector.json"
          ],
          "vector:mcfunction": [
            "constant.numeric.vector.mcfunction"
          ],
          "*.inString:json": [
            "markup.italic.in-string.json"
          ],
          "*.inString:mcfunction": [
            "markup.italic.in-string.mcfunction"
          ]
        }
      }
    ]
  },
  "activationEvents": [
    "workspaceContains:**/pack.mcmeta",
    "workspaceContains:**/*.mcfunction",
    "workspaceContains:**/*.nbtdoc",
    "onLanguage:mcfunction",
    "onLanguage:nbtdoc",
    "onCommand:datapack.createFile",
    "onCommand:datapack.evaludateJavaScript",
    "onCommand:datapack.redownloadData",
    "onCommand:datapack.regenerateCache"
  ]
}

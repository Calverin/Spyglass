//// __fixture__.mcdoc syntax:
////
//// //// <comment>
////
//// //== <test case name>
//// //=== <absolute file path>
//// <content of the file>
////
//// If no <absolute file path> is specified, a default one is used.

//== duplicated path
struct Foo {}
type Foo = boolean

//== duplicated path with implicit use statement binding
//=== /module.mcdoc
struct Used {}

//=== /client.mcdoc
use super::used::Used

struct Used {}

//== duplicated path with explicit use statement binding
//=== /module.mcdoc
struct Used {}

//=== /client.mcdoc
use super::used::Used as ReboundUsed

struct Used {}
struct ReboundUsed {}

//== hoisting
struct Foo {
	bar: Bar,
}
struct Bar {}

//== simple types
type AnyTest = any
type BooleanTest = boolean
type StringTest0 = string
type StringTest1 = string @ 1..
type StringTest2 = string @ ..128
type StringTest3 = string @ 1
type StringTest4 = string @ 4..128
type LiteralTest0 = "foo"
type LiteralTest1 = 42L
type LiteralTest2 = true
type NumericTest = byte @ 42..91
type PrimitiveArrayTest0 = int[] @ 4
type PrimitiveArrayTest1 = long@1..[]
type PrimitiveArrayTest2 = byte@0..1[] @ 8
type ListTest0 = [byte]
type ListTest1 = [[string]]
type ListTest2 = [struct {}] @ 1
type TupleTest0 = [byte,]
type TupleTest1 = [string, boolean]

//== attributed types
type NoValue = #[deprecated] boolean
type SimpleValue = #[since=1.19] boolean
type TreeValue = #[id(registry="worldgen/biome",tags=allowed)] string
type EnumValue = #[bitfield(enum(int) {
	HandAll = 1,
	BootsAll = 2,
})] int

//== enum/string
enum(string) Trigger {
	#[since=1.19] AllayDropItemOnBlock = "allay_drop_item_on_block",
	BeeNestDestroyed = "bee_nest_destroyed",
}
//== enum/duplicated keys
enum (byte) Test {
	Naughty = 42b,
	Naughty = 91b,
}

//== struct/anonymous
struct {}
//== struct/empty
struct Empty {}
//== struct/simple
struct Simple {
	Foo: byte,
	#[since=1.19]
	Bar?: #[id] string,
}
//== struct/nested
struct Nested {
	Child: struct {
		Grandchild: struct NamedGrandchild {}
	}
}
//== struct/nested spread
struct NestedSpread {
	#[since=1.17]
	...#[expandable] struct {
		...minecraft:carver_config[[%parent.type]],
	},
}
//== struct/duplicated keys
struct Test {
	naughty: boolean,
	naughty: string,
}
//== struct/duplicated keys in nested anonymous struct
struct Test {
	child: struct {
		naughty: boolean,
		naughty: string,
	},
}

//== union/empty
type Union = ()
//== union/simple
type Union = (int | string)
//== union/nested
type Union = (
	string |
	(boolean | ((byte | int) | short)) |
)
//== union/number range
type Union = (
	int |
	[int, int] |
	struct {
		min_inclusive: int,
		max_inclusive: int,
	} |
)

//// 
//// 
//// // //== type parameter
//// // //=== /foo.mcdoc
//// // type InclusiveRange<T> = (
//// // 	T |
//// // 	[T] @ 2 |
//// // 	struct {
//// // 		min_inclusive: T,
//// // 		max_inclusive: T,
//// // 	} |
//// // )
//// 
//// // type VarietyType = InclusiveRange<int @ 1..64>
//// 
//// // //== dispatcher
//// // //=== /foo.mcdoc
//// // #[since=1.18]
//// // dispatch minecraft:block_state_provider[dual_noise_provider] to struct DualNoiseProvider {
//// // 	...NoiseProvider,
//// // 	variety: InclusiveRange<int @ 1..64>,
//// // 	slow_noise: NoiseParameters,
//// // 	slow_scale: float @ 0<..,
//// // 	states: [BlockState],
//// // }
